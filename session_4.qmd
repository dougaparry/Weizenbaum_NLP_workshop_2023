---
title: "Session 4: Practical Exercises"
author: "DA Parry"
format: html
---

## Load the packages for the analysis
```{r}
library(tidyverse)
library(tidytext)
library(topicmodels)
library(tm)
library(ldatuning)
```

## Load the dataset and take a look
```{r}
#install.packages("schrute")
library(schrute)

theoffice_df <- theoffice
glimpse(theoffice_df)
```

```{r}
head(theoffice_df, 10)
```

## Preprocessing the dataset

Using the dataframe provide, create a document term matrix that we can use for topic modelling. For our analysis we will treat each episode as a unique document. 

Hint, remember to first tidy the dataset and then, for each document, count the number of times each word appears. Only after this can you cast to a DTM. 

For this analysis, after tokenising and removing the standard stopwords, 1) filter out all words that are 3 characters or less in length and 2) use the provided `custom_stopwords` dataframe and also remove these words before creating the DTM.

```{r}
custom_stopwords <- tibble(word = c("yeah", "hey"))

```


## What topics can we identify in the scripts?

Fit an LDA topic model with 5 topics. Depending on your computer, this may take a minute to run. 

FYI: This will likely not produce meaningful topics but we don't have the time to run the code to produce better topics.

```{r}

```


```{r}

```

Fit an CTM topic model with 5 topics. Depending on your computer, this may take a minute to run. 

FYI: This will likely not produce meaningful topics but we don't have the time to run the code to produce better topics.

```{r}

```
Extract the gamma matrix from the model and assign the topic with the highest gamma values to each document (episode).

```{r}

```

## Bonus: Does IMDB rating differ by topic?

After allocating topics to documents, left join this dataframe with the original dataframe, select the distinct combination of document, topic, and imdb_rating and determine the mean (with standard deviation) imdb rating for each topic

```{r}

```



